# Define log file path
$logFilePath = "C:\InstallationLogs\InstallationLog_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"

# Start transcript to capture output to log file
Start-Transcript -Path $logFilePath

# Define the source file path for the new version installer
$sourceFileNewVersion = "\\SourceServer\Share\YourNewInstaller.msi"

# Define the display name of the old version software
$oldVersionDisplayName = "Old Software Name"

# Define an array of destination servers
$destinationServers = @("DestinationServer1", "DestinationServer2", "DestinationServer3")

# Define the credentials for remote authentication
$username = "YourUsername"
$password = ConvertTo-SecureString "YourPassword" -AsPlainText -Force
$credentials = New-Object System.Management.Automation.PSCredential($username, $password)

# Email details
$smtpServer = "your_smtp_server"
$senderEmail = "sender@example.com"
$recipientEmail = "recipient@example.com"
$subject = "Software Installation Status"

# Loop through each destination server
foreach ($destinationServer in $destinationServers) {
    try {
        # Establish a PowerShell remoting session to the destination server using provided credentials
        $session = New-PSSession -ComputerName $destinationServer -Credential $credentials

        # Check if the old version exists and uninstall it if found
        $uninstallResult = Invoke-Command -Session $session -ScriptBlock {
            param($oldDisplayName)
            $uninstallCommand = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -eq $oldDisplayName } | ForEach-Object { $_.Uninstall() }
            return $uninstallCommand
        } -ArgumentList $oldVersionDisplayName

        if ($uninstallResult -eq 0) {
            $uninstallStatus = "Old version uninstalled successfully"
        } elseif ($uninstallResult -eq $null) {
            $uninstallStatus = "Old version not found"
        } else {
            $uninstallStatus = "Failed to uninstall old version (Error code: $uninstallResult)"
        }

        # Copy the new version installer to the destination server
        Copy-Item -Path $sourceFileNewVersion -Destination "C:\DestinationPath\" -ToSession $session -Force

        # Install the new version software on the destination server
        $installResult = Invoke-Command -Session $session -ScriptBlock {
            param($sourceFilePath)
            Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$sourceFilePath`" /quiet" -Wait
            return $?
        } -ArgumentList "C:\DestinationPath\YourNewInstaller.msi"

        if ($installResult) {
            $installStatus = "New version installed successfully"
        } else {
            $installStatus = "Failed to install new version"
        }

        # Send email notification with uninstall and install status
        $body = "Destination Server: $destinationServer`r`n" +
                "Uninstall Status: $uninstallStatus`r`n" +
                "Install Status: $installStatus"

        Send-MailMessage -SmtpServer $smtpServer -From $senderEmail -To $recipientEmail -Subject $subject -Body $body

    } catch {
        Write-Error "Failed to process installation on $destinationServer. $_"
    } finally {
        # Close the PowerShell remoting session
        Remove-PSSession $session
    }
}

# Stop transcript
Stop-Transcript
