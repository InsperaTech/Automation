# Define the source file path
$sourceFile = "\\SourceServer\Share\YourInstaller.msi"

# Define an array of destination servers
$destinationServers = @("DestinationServer1", "DestinationServer2", "DestinationServer3")

# Define the credentials for remote authentication
$username = "YourUsername"
$password = ConvertTo-SecureString "YourPassword" -AsPlainText -Force
$credentials = New-Object System.Management.Automation.PSCredential($username, $password)

# Email details
$smtpServer = "your_smtp_server"
$senderEmail = "sender@example.com"
$recipientEmail = "recipient@example.com"
$subject = "Software Installation Completed"
$bodyTemplate = @"
The software installation process has completed successfully.

Installed Software: {0}
Installed Version: {1}
"@

# Loop through each destination server
foreach ($destinationServer in $destinationServers) {
    try {
        # Establish a PowerShell remoting session to the destination server using provided credentials
        $session = New-PSSession -ComputerName $destinationServer -Credential $credentials

        # Copy the file to the destination server
        Copy-Item -Path $sourceFile -Destination "C:\DestinationPath\" -ToSession $session -Force

        # Install the software on the destination server
        Invoke-Command -Session $session -ScriptBlock {
            param($sourceFilePath)
            Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$sourceFilePath`" /quiet" -Wait
            Write-Output "Software installed on $($env:COMPUTERNAME)"
            # Delete the file from the destination server after installation
            Remove-Item -Path $sourceFilePath -Force
            Write-Output "File deleted from $($env:COMPUTERNAME)"
            # Retrieve the software version from the registry (replace this with your actual method)
            $installedVersion = "1.0.0" # Replace with your actual version retrieval method
            return $installedVersion
        } -ArgumentList "C:\DestinationPath\YourInstaller.msi" | ForEach-Object { $version = $_ }

        Write-Output "File copied, software installed, and file deleted successfully on $destinationServer"

        # Compose email body with software name and version
        $body = $bodyTemplate -f "YourSoftwareName", $version

        # Send email notification
        Send-MailMessage -SmtpServer $smtpServer -From $senderEmail -To $recipientEmail -Subject $subject -Body $body

        Write-Output "Email notification sent successfully."

    } catch {
        Write-Error "Failed to copy file, install software, delete file, or send email on $destinationServer. $_"
    } finally {
        # Close the PowerShell remoting session
        Remove-PSSession $session
    }
}
