# Define the source file path for the new version installer
$sourceFileNewVersion = "\\SourceServer\Share\YourNewInstaller.msi"

# Define the display name of the old version software
$oldVersionDisplayName = "Old Software Name"

# Define an array of destination servers
$destinationServers = @("DestinationServer1", "DestinationServer2", "DestinationServer3")

# Define the credentials for remote authentication
$username = "YourUsername"
$password = ConvertTo-SecureString "YourPassword" -AsPlainText -Force
$credentials = New-Object System.Management.Automation.PSCredential($username, $password)

# Email details
$smtpServer = "your_smtp_server"
$senderEmail = "sender@example.com"
$recipientEmail = "recipient@example.com"
$subject = "Software Installation Status"

# Log file path
$logFilePath = "C:\InstallationLogs\installation_log_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"

# Create log directory if it doesn't exist
$logDirectory = Split-Path $logFilePath
if (-not (Test-Path -Path $logDirectory)) {
    New-Item -Path $logDirectory -ItemType Directory -Force | Out-Null
}

# Function to write log message
function Write-Log {
    param (
        [string]$Message
    )
    $TimeStamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogMessage = "$TimeStamp - $Message"
    Add-Content -Path $logFilePath -Value $LogMessage
}

# Function to compare software versions
function Compare-Versions {
    param (
        [string]$installedVersion,
        [string]$newVersion
    )
    $installedVersion = [Version]$installedVersion
    $newVersion = [Version]$newVersion

    if ($installedVersion -ge $newVersion) {
        return $true  # Installed version is equal to or newer than the new version
    } else {
        return $false # Installed version is older than the new version
    }
}

# Loop through each destination server
foreach ($destinationServer in $destinationServers) {
    try {
        Write-Log "Processing installation on $destinationServer"
        
        # Establish a PowerShell remoting session to the destination server using provided credentials
        $session = New-PSSession -ComputerName $destinationServer -Credential $credentials

        # Get the computer name of the session
        $sessionComputerName = Invoke-Command -Session $session -ScriptBlock {
            return $env:COMPUTERNAME
        }

        # Log the session computer name
        Write-Log "Session Computer Name: $sessionComputerName"

        # Check if the old version exists and uninstall it if found
        $uninstallResult = Invoke-Command -Session $session -ScriptBlock {
            param($oldDisplayName)
            $uninstallCommand = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -eq $oldDisplayName } | ForEach-Object { $_.Uninstall() }
            return $uninstallCommand
        } -ArgumentList $oldVersionDisplayName

        if ($uninstallResult -eq 0) {
            $uninstallStatus = "Old version uninstalled successfully"
        } elseif ($uninstallResult -eq $null) {
            $uninstallStatus = "Old version not found"
        } else {
            $uninstallStatus = "Failed to uninstall old version (Error code: $uninstallResult)"
        }
        Write-Log $uninstallStatus

        # Get the version of the installed software
        $installedVersion = Invoke-Command -Session $session -ScriptBlock {
            param($oldDisplayName)
            $installedSoftware = Get-WmiObject -Class Win32_Product | Where-Object { $_.Name -eq $oldDisplayName }
            if ($installedSoftware) {
                return $installedSoftware.Version
            } else {
                return $null
            }
        } -ArgumentList $oldVersionDisplayName

        # Compare versions
        if ($installedVersion -and Compare-Versions -installedVersion $installedVersion -newVersion $newVersion) {
            $installStatus = "New version already installed"
        } else {
            # Copy the new version installer to the destination server
            Write-Log "Copying installer to $destinationServer"
            Copy-Item -Path $sourceFileNewVersion -Destination "C:\DestinationPath\" -ToSession $session -Force
            Write-Log "Installer copied successfully to $destinationServer"

            # Install the new version software on the destination server
            Write-Log "Installing new version on $destinationServer"
            $installResult = Invoke-Command -Session $session -ScriptBlock {
                param($sourceFilePath)
                Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$sourceFilePath`" /quiet" -Wait
                return $?
            } -ArgumentList "C:\DestinationPath\YourNewInstaller.msi"

            if ($installResult) {
                $installStatus = "New version installed successfully"
            } else {
                $installStatus = "Failed to install new version"
            }
            Write-Log $installStatus

            # Remove the installer from the destination server
            Write-Log "Removing installer from $destinationServer"
            Remove-Item -Path "C:\DestinationPath\YourNewInstaller.msi" -Force
            Write-Log "Installer removed successfully from $destinationServer"
        }

        # Send email notification with uninstall, install, and removal status
        $body = "Destination Server: $destinationServer`r
