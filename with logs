# Define the source file path
$sourceFile = "\\SourceServer\Share\YourInstaller.msi"

# Define an array of destination servers
$destinationServers = @("DestinationServer1", "DestinationServer2", "DestinationServer3")

# Define the credentials for remote authentication
$username = "YourUsername"
$password = ConvertTo-SecureString "YourPassword" -AsPlainText -Force
$credentials = New-Object System.Management.Automation.PSCredential($username, $password)

# Define email parameters
$emailParams = @{
    SmtpServer = "smtp.example.com"
    From = "sender@example.com"
    To = "recipient@example.com"
    Subject = "Software Installation Completed"
    Body = "The software has been successfully installed on the following servers:`n"
}

# Define log file path
$logFilePath = "C:\Path\To\Installation_Log.txt"

# Initialize empty array to store log messages
$logMessages = @()

# Loop through each destination server
foreach ($destinationServer in $destinationServers) {
    try {
        # Establish a PowerShell remoting session to the destination server using provided credentials
        $session = New-PSSession -ComputerName $destinationServer -Credential $credentials

        # Copy the file to the destination server
        Copy-Item -Path $sourceFile -Destination "C:\DestinationPath\" -ToSession $session -Force

        # Install the software on the destination server
        $installedVersion = Invoke-Command -Session $session -ScriptBlock {
            param($sourceFilePath)
            Start-Process -FilePath "msiexec.exe" -ArgumentList "/i `"$sourceFilePath`" /quiet" -Wait
            $installedVersion = (Get-WmiObject -Class Win32_Product | Where-Object {$_.Name -like "Your Software Name"}).Version
            $logMessage = "Software installed on $($env:COMPUTERNAME). Version: $installedVersion"
            Write-Output $logMessage
            $installedVersion
        } -ArgumentList "C:\DestinationPath\YourInstaller.msi"

        Write-Output "File copied and software installed successfully on $destinationServer"

        # Add the server and installed version information to the email body
        $emailParams['Body'] += "$destinationServer - Version: $installedVersion`n"

        # Add log message to array
        $logMessages += $logMessage
    } catch {
        $errorMessage = "Failed to copy file or install software on $destinationServer. $_"
        Write-Error $errorMessage
        # Add error message to array
        $logMessages += $errorMessage
    } finally {
        # Close the PowerShell remoting session
        Remove-PSSession $session
    }
}

# Save log messages to text file
$logMessages | Out-File -FilePath $logFilePath

# Send email
Send-MailMessage @emailParams
